from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler

from gpt import *
from util import *


async def cmd_debug(update, context):
    if dialog.node:
        await send_text(update, context, dialog.node)
    if len(dialog.list) > 0:
        await send_text(update, context, "\n\n".join(dialog.list))


async def cmd_start(update, context):
    dialog.node = "main"
    text = load_message("main")
    await send_photo(update, context, "main")
    await send_text(update, context, text)

    await show_main_menu(update, context, {  # –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π
        "start": "–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞",
        "profile": "–≥–µ–Ω–µ—Ä–∞—Ü–∏—è Tinder-–ø—Ä–æ—Ñ–ª—è üòé",
        "opener": "—Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ ü•∞",
        "message": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ üòà",
        "date": "–ø–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏ üî•",
        "gpt": "–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT üß†"
    })


async def cmd_gpt(update, context):
    dialog.node = "gpt"
    text = load_message("gpt")
    await send_text(update, context, text)
    await send_photo(update, context, "gpt")


async def dialog_gpt(update, context):
    text = update.message.text
    prompt = load_prompt("gpt")
    answer = await chatgpt.send_question(prompt, text)
    await send_text(update, context, answer)


async def cmd_date(update, context):
    dialog.node = "date"
    text = load_message("date")
    await send_photo(update, context, "date")
    await send_text_buttons(update, context, text, {
        "date_grande": "1. –ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ üî•  (—Å–ª–æ–∂–Ω–æ—Å—Ç—å 5/10)",
        "date_robbie": "2. –ú–∞—Ä–≥–æ –†–æ–±–±–∏ üî•üî•  (—Å–ª–æ–∂–Ω–æ—Å—Ç—å 7/10)",
        "date_zendaya": "3. –ó–µ–Ω–¥–µ—è     üî•üî•üî• (—Å–ª–æ–∂–Ω–æ—Å—Ç—å 10/10)",
        "date_gosling": "4. –†–∞–π–∞–Ω –ì–æ—Å–ª–∏–Ω–≥ üòé (—Å–ª–æ–∂–Ω–æ—Å—Ç—å 7/10)",
        "date_hardy": "5. –¢–æ–º –•–∞—Ä–¥–∏   üòéüòé (—Å–ª–æ–∂–Ω–æ—Å—Ç—å 10/10)"
    })


async def dialog_date(update, context):
    text = update.message.text
    my_message = await send_text(update, context, "–ù–∞–±–∏—Ä–∞–µ—Ç —Ç–µ–∫—Å—Ç...")
    answer = await chatgpt.add_message(text)
    await my_message.edit_text(answer)


async def button_date(update, context):
    query = update.callback_query.data  # –∫–æ–¥ –∫–Ω–æ–ø–∫–∏
    await update.callback_query.answer()

    await send_photo(update, context, query)

    prompt = load_prompt(query)
    chatgpt.set_prompt(prompt)


async def cmd_message(update, context):
    dialog.node = "message"
    text = load_message("message")
    await send_photo(update, context, "message")
    await send_text_buttons(update, context, text, {
        "message_next": "–°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "message_date": "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –Ω–∞ —Å–≤–∏–¥–∞–Ω–∏–µ"
    })
    dialog.list.clear()


async def dialog_message(update, context):
    text = update.message.text
    dialog.list.append(text)


async def button_message(update, context):
    query = update.callback_query.data  # –∫–æ–¥ –∫–Ω–æ–ø–∫–∏
    await update.callback_query.answer()

    prompt = load_prompt(query)
    user_chat_history = "\n\n".join(dialog.list)
    my_message = await send_text(update, context, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞...")
    answer = await chatgpt.send_question(prompt, user_chat_history)
    await my_message.edit_text(answer)


async def hello(update, context):
    if dialog.node == 'gpt':
        await dialog_gpt(update, context)
    elif dialog.node == 'date':
        await dialog_date(update, context)
    elif dialog.node == 'message':
        await dialog_message(update, context)
    else:
        await send_text(update, context, "_–ü—Ä–∏–≤–µ—Ç!_")
        await send_text(update, context, "–í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ " + update.message.text)
        await send_text_buttons(update, context, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã", {  # –¢–µ–∫—Å—Ç –ø–µ—Ä–µ–¥ –∫–Ω–æ–ø–∫–æ–π
            "btn_start": " –°—Ç–∞—Ä—Ç ",  # –¢–µ–∫—Å—Ç –∏ –∫–æ–º–∞–Ω–¥–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"
            "btn_stop": " –°—Ç–æ–ø "  # –¢–µ–∫—Å—Ç –∏ –∫–æ–º–∞–Ω–¥–∞ –∫–Ω–æ–ø–∫–∏ "–°—Ç–æ–ø"
        })
        await send_photo(update, context, "avatar_main")


async def button_hello(update, context):
    query = update.callback_query.data  # –∫–æ–¥ –∫–Ω–æ–ø–∫–∏
    if query == "btn_start":
        await send_text(update, context, "–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç")
    else:
        await send_text(update, context, "–í—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–æ–ø")


dialog = Dialog()
dialog.node = None
dialog.list = []

gpt_token = open("gpt_token.txt", "r").read()
chatgpt = ChatGptService(token=gpt_token)

tlg_token = open("tlg_token.txt", "r").read()
app = ApplicationBuilder().token(tlg_token).build()

app.add_handler(CommandHandler("debug", cmd_debug))
app.add_handler(CommandHandler("start", cmd_start))
app.add_handler(CommandHandler("gpt", cmd_gpt))
app.add_handler(CommandHandler("date", cmd_date))
app.add_handler(CommandHandler("message", cmd_message))

app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, hello))  # –æ—Ç–∫–ª—é—á–∞–µ–º –∫–æ–º–∞–Ω–¥—ã

app.add_handler(CallbackQueryHandler(button_date, pattern="^date_.*"))
app.add_handler(CallbackQueryHandler(button_message, pattern="^message_.*"))
app.add_handler(CallbackQueryHandler(button_hello))

app.run_polling()
